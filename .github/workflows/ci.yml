name: Infrastructure & Configuration Deploy

on:
  push:
    branches: [main, dev, feature/**]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  TF_IN_AUTOMATION: true
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

jobs:
  # ==========================================================================
  # STAGE 1: VALIDATION - Lint and validate all code
  # ==========================================================================
  validate-repository:
    name: "Validate Repository"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4

      - name: "Setup Python 3.13"
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: "Install Python Dependencies"
        run: |
          pip install -r requirements.txt
          ansible-galaxy collection install -r requirements.yml || true

      - name: "Ansible Lint"
        run: |
          ansible-lint --version
          ansible-lint || echo "Ansible lint warnings found"

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.7.5

      - name: "Terraform Init (Validation Mode)"
        working-directory: terraform
        run: terraform init -input=false -backend=false

      - name: "Terraform Validate"
        working-directory: terraform
        run: terraform validate

      - name: "Terraform Format Check"
        working-directory: terraform
        run: |
          if ! terraform fmt -check; then
            echo "Terraform formatting issues found. Run 'terraform fmt' to fix."
            exit 1
          fi

  # ==========================================================================
  # STAGE 2: TERRAFORM PLAN - Plan infrastructure changes (runs on PR & main)
  # ==========================================================================
  terraform-plan:
    name: "Terraform Plan"
    needs: validate-repository
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      pull-requests: write  # For posting plan comments
    outputs:
      plan-output: ${{ steps.plan.outputs.stdout }}
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.7.5
          terraform_wrapper: false

      - name: "Authenticate to GCP"
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: "Configure gcloud"
        uses: google-github-actions/setup-gcloud@v2

      - name: "Terraform Init"
        working-directory: terraform
        run: |
          terraform init \
            -backend-config="bucket=$GCP_PROJECT_ID-tfstate" \
            -backend-config="prefix=terraform"

      - name: "Terraform Plan"
        id: plan
        working-directory: terraform
        run: |
          terraform plan \
            -var="project_id=$GCP_PROJECT_ID" \
            -var="ansible_bucket_name=$GCP_PROJECT_ID-ansible" \
            -var="terraform_state_bucket=$GCP_PROJECT_ID-tfstate" \
            -var-file=config/terraform.tfvars \
            -out=tfplan

      - name: "Save Terraform Plan"
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: terraform/tfplan
          retention-days: 7

  # ==========================================================================
  # STAGE 3: TERRAFORM APPLY - Deploy infrastructure (main branch only)
  # ==========================================================================
  terraform-apply:
    name: "Terraform Apply"
    needs: [validate-repository, terraform-plan]
    # if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    environment: production  # Require approval for production deployments
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.7.5

      - name: "Authenticate to GCP"
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: "Configure gcloud"
        uses: google-github-actions/setup-gcloud@v2

      - name: "Terraform Init"
        working-directory: terraform
        run: |
          terraform init \
            -backend-config="bucket=$GCP_PROJECT_ID-tfstate" \
            -backend-config="prefix=terraform"

      - name: "Terraform Apply"
        working-directory: terraform
        run: |
          terraform apply -auto-approve -input=false \
            -var="project_id=$GCP_PROJECT_ID" \
            -var="ansible_bucket_name=$GCP_PROJECT_ID-ansible" \
            -var="terraform_state_bucket=$GCP_PROJECT_ID-tfstate" \
            -var-file=config/terraform.tfvars

      - name: "Terraform Output"
        working-directory: terraform
        run: |
          terraform output -json > tf-output.json

      - name: "Upload Terraform Outputs"
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs
          path: terraform/tf-output.json
          retention-days: 30

  # ==========================================================================
  # STAGE 4: DEPLOY ANSIBLE CONFIGS - Push to GCS to trigger Cloud Build
  # ==========================================================================
  deploy-ansible-configs:
    name: "Deploy Ansible Configurations"
    needs: [validate-repository, terraform-apply]
    # if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4

      - name: "Authenticate to GCP"
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: "Configure gcloud"
        uses: google-github-actions/setup-gcloud@v2

      - name: "Create Ansible Archive"
        run: |
          # Create archive excluding terraform directory and CI files
          tar -czf --warning=no-file-changed ansible-configs.tar.gz \
            --exclude='terraform' \
            --exclude='.github' \
            --exclude='.git' \
            --exclude='*.md' \
            --exclude='requirements.txt' \
            .

      - name: "Upload to GCS Bucket"
        run: |
          # Upload the archive
          gsutil cp ansible-configs.tar.gz gs://$GCP_PROJECT_ID-ansible/

          # Upload individual files for direct access
          gsutil -m rsync -r -d \
            --exclude='terraform/**' \
            --exclude='.github/**' \
            --exclude='.git/**' \
            --exclude='*.md' \
            --exclude='requirements.txt' \
            . gs://$GCP_PROJECT_ID-ansible/

          # Set metadata to trigger Cloud Build
          gsutil setmeta -h "x-goog-meta-deployed-by:github-actions" \
            -h "x-goog-meta-commit-sha:${{ github.sha }}" \
            -h "x-goog-meta-deploy-time:$(date -u +%Y%m%d-%H%M%S)" \
            gs://$GCP_PROJECT_ID-ansible/ansible-configs.tar.gz

      - name: "Deployment Summary"
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Infrastructure Status" >> $GITHUB_STEP_SUMMARY
          echo "- Terraform validation passed" >> $GITHUB_STEP_SUMMARY
          echo "- Infrastructure deployed successfully" >> $GITHUB_STEP_SUMMARY
          echo "- Ansible configurations uploaded to GCS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Cloud Build will automatically trigger" >> $GITHUB_STEP_SUMMARY
          echo "2. Ansible Controller will configure all hosts" >> $GITHUB_STEP_SUMMARY
          echo "3. Check Cloud Build logs for configuration status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Useful Commands" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Check Cloud Build status" >> $GITHUB_STEP_SUMMARY
          echo "gcloud builds list --limit=5" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# View controller logs" >> $GITHUB_STEP_SUMMARY
          echo "gcloud compute ssh controller \\" >> $GITHUB_STEP_SUMMARY
          echo "  --zone=${{ secrets.GCP_ZONE || 'us-central1-a' }} \\" >> $GITHUB_STEP_SUMMARY
          echo "  --command='sudo journalctl -u google-startup-scripts.service -f'" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
